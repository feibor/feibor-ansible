#!/bin/bash
#--------------------------------------------------
# This script is used for: 
# 1. to run feibor-ansible in a container (recommended)
# @author:   lipengfei
# @usage:    ./ansidown.sh
# @repo:     https://github.com/feibor/feibor-ansible
#--------------------------------------------------

set -o nounset
set -o errexit
set -o pipefail

EZANSI=1.0.1


# Constants
RESET='\033[0m'
RED='\033[38;5;1m'
GREEN='\033[38;5;2m'
YELLOW='\033[38;5;3m'
MAGENTA='\033[38;5;5m'
CYAN='\033[38;5;6m'

# Functions

########################
# Print to STDERR
# Arguments:
#   Message to print
# Returns:
#   None
#########################
stderr_print() {
    # 'is_boolean_yes' is defined in libvalidations.sh, but depends on this file so we cannot source it
    local bool="${BITNAMI_QUIET:-false}"
    # comparison is performed without regard to the case of alphabetic characters
    shopt -s nocasematch
    if ! [[ "$bool" = 1 || "$bool" =~ ^(yes|true)$ ]]; then
        printf "%b\\n" "${*}" >&2
    fi
}

########################
# Log message
# Arguments:
#   Message to log
# Returns:
#   None
#########################
log() {
    stderr_print "${CYAN}${MODULE:-} ${MAGENTA}$(date "+%T.%2N ")${RESET}${*}"
}
########################
# Log an 'info' message
# Arguments:
#   Message to log
# Returns:
#   None
#########################
info() {
    log "${GREEN}INFO ${RESET} ==> ${*}"
}
########################
# Log message
# Arguments:
#   Message to log
# Returns:
#   None
#########################
warn() {
    log "${YELLOW}WARN ${RESET} ==> ${*}"
}
########################
# Log an 'error' message
# Arguments:
#   Message to log
# Returns:
#   None
#########################
error() {
    log "${RED}ERROR${RESET} ==> ${*}"
}
########################
# Log a 'debug' message
# Globals:
#   BITNAMI_DEBUG
# Arguments:
#   None
# Returns:
#   None
#########################
debug() {
    # 'is_boolean_yes' is defined in libvalidations.sh, but depends on this file so we cannot source it
    local bool="${BITNAMI_DEBUG:-false}"
    # comparison is performed without regard to the case of alphabetic characters
    shopt -s nocasematch
    if [[ "$bool" = 1 || "$bool" =~ ^(yes|true)$ ]]; then
        log "${MAGENTA}DEBUG${RESET} ==> ${*}"
    fi
}

########################
# Indent a string
# Arguments:
#   $1 - string
#   $2 - number of indentation characters (default: 4)
#   $3 - indentation character (default: " ")
# Returns:
#   None
#########################
indent() {
    local string="${1:-}"
    local num="${2:?missing num}"
    local char="${3:-" "}"
    # Build the indentation unit string
    local indent_unit=""
    for ((i = 0; i < num; i++)); do
        indent_unit="${indent_unit}${char}"
    done
    # shellcheck disable=SC2001
    # Complex regex, see https://github.com/koalaman/shellcheck/wiki/SC2001#exceptions
    echo "$string" | sed "s/^/${indent_unit}/"
}

  # get host's IP
host_if=$(ip route|grep default|head -n1|cut -d' ' -f5)
host_ip=$(ip a|grep "$host_if$"|head -n1|awk '{print $2}'|cut -d'/' -f1)

function run_ezansi_container() {
 start_feiboransible_docker
}

function start_feiboransible_docker() {
  # run kubeasz docker container
  docker run --detach \
      --env HOST_IP="$host_ip" \
      --name ezansi \
      --network host \
      --restart always \
      --volume "$BASE":"$BASE" \
      --volume /root/.ssh:/root/.ssh \
      --volume /etc/docker:/etc/docker \
      lipengfei217/ezansi:${EZANSI}

   docker exec ezansi install -o root -g root $BASE/ansictl /usr/bin
}

function main() {
    BASE="/etc/ezansi"
    imageDir="$BASE/down/images"
    ctrImageDir="$BASE/down/ctrimages"
    # check if use bash shell
    readlink /proc/$$/exe|grep -q "bash" || { logger error "you should use bash shell, not sh"; exit 1; }
    # check if use with root
    [[ "$EUID" -ne 0 ]] && { logger error "you should run this script as root"; exit 1; }

    ACTION=""
    while getopts "CDP:RSX:d:e:k:m:z:" OPTION; do
        case "$OPTION" in
            R)
            ACTION="run_ezansi_container"
            ;;
            ?)
            echo "Error action"
            exit 1
            ;;
        esac
    done
    
    [[ "$ACTION" == "" ]] && { error "illegal option"; exit 1; }
        
    # excute cmd "$ACTION" 
    info "Action begin: $ACTION"
    ${ACTION} || { error "Action failed: $ACTION"; return 1; }
    info "Action successed: $ACTION"
}

main "$@"